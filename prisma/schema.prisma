generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id String @id(map: "organization_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  name       String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  Project    Project[]
  Colony     Colony[]
  Mouseline  Mouseline[]

  Mouse     Mouse[]
  UserToOrg UserToOrg[]

  @@map("organization")
}

model User {
  id         String   @id(map: "user_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  password   String
  email      String
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  permissions Json
  PaperTrail  PaperTrail[]
  UserToOrg   UserToOrg[]

  @@map("users")
}

model UserToOrg {
  id             String       @id(map: "user_to_org_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  userId         String       @db.Uuid
  organizationId String       @db.Uuid

  @@index([userId])
  @@map("user_to_org")
}

model Mouse {
  id             String           @id(map: "mouse_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  rfid_tag       String?
  date_of_birth  DateTime
  sex            String
  mouseline      Mouseline?       @relation(fields: [mouselineId], references: [id])
  cage           Cage?            @relation(fields: [cageId], references: [id])
  protocol       String?
  experiment     String
  date_of_death  DateTime?
  comments       String?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  cause_of_death String?
  properties     Json             @default("{}")
  mouselineId    String?          @db.Uuid
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String           @db.Uuid
  permissions    Json
  MouseToProject MouseToProject[]
  cageId         String           @db.Uuid

  @@index([organizationId])
  @@map("mice")
}

model Colony {
  id String @id(map: "colony_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  name           String
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.Uuid
  permissions    Json
  Project        Project[]

  @@map("colonies")
}

model MouseToProject {
  id        String  @id(map: "mouse_to_proj_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  mouse     Mouse   @relation(fields: [mouseId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
  mouseId   String  @db.Uuid
  projectId String  @db.Uuid

  @@map("mouse_to_project")
}

model Project {
  id             String           @id(map: "project_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  Colony         Colony           @relation(fields: [colonyId], references: [id], onDelete: Cascade)
  colonyId       String           @db.Uuid
  Organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String           @db.Uuid
  permissions    Json
  MouseToProject MouseToProject[]

  @@map("projects")
}

model Mouseline {
  id             String       @id(map: "mouseline_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id])
  name           String
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  Mouse          Mouse[]
  organizationId String       @db.Uuid
  permissions    Json

  @@map("mouselines")
}

model Cage {
  id             String   @id(map: "cage_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  permissions    Json
  Mouse          Mouse[]
  organizationId String   @db.Uuid

  @@map("cages")
}

enum Action {
  DELETE
  CREATE
  MODIFY
}

enum TableList {
  Mouse
  Colony
  Mouseline
  Project
  User
  Organization
  Cage
  MouseToProject
}

model PaperTrail {
  id             String    @id(map: "papertrail_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  action         Action
  created_at     DateTime  @default(now())
  table          TableList
  organizationId String    @db.Uuid
  recordId       String
  oldVal         String?
  newVal         String?
  key            String?
  user           User      @relation(fields: [userId], references: [id])
  userId         String    @db.Uuid

  @@index([table, recordId, key, created_at(sort: Desc)])
  @@map("papertrail")
}
